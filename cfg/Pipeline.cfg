#!/usr/bin/env python
PACKAGE = "sonar"
import roslib;roslib.load_manifest(PACKAGE)
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# gen.add("int_param",    int_t,    0, "An Integer parameter", 0,0,2)
# gen.add("double_param", double_t, 0, "A double parameter",   10.0, 0., 20.)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello Worlds")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

# Camera sonar options
gen.add("CameraStartRange", int_t, 0, "CameraStartRange", 0, 0, 255)
gen.add("CameraEndRange", int_t, 0, "CameraEndRange", 85, 0, 255)
gen.add("CameraStartRatio", double_t, 0, "CameraStartRatio", 1., 1., 3.)
gen.add("CameraEndRatio", double_t, 0, "CameraEndRatio", 2., 1., 3.)

# Particle filter options sonar
gen.add("ParticleSonarMajor", double_t, 0, "ParticleSonarMajor", 0.5, 0., 20.)
gen.add("ParticleSonarMinor", double_t, 0, "ParticleSonarMinor", 0.5, 0., 20.)
gen.add("ParticleSonarTolerance", double_t, 0, "ParticleSonarTolerance", 0.5, 0., 20.)

# Particle filter options camera
gen.add("ParticleCameraColor", int_t, 0, "ParticleCameraColor", 0, 0, 255)
gen.add("ParticleCameraRatio", double_t, 0, "ParticleCameraRatio", 1., 1., 3.)
gen.add("ParticleCameraTolerance", double_t, 0, "ParticleCameraTolerance", 1., 1., 3.)

# Particle filter other options
gen.add("ParticleRandomize", double_t, 0, "ParticleRandomize", 0.1, 0., 1.)
gen.add("ParticleWeightage", double_t, 0, "ParticleWeightage", 0.5, 0., 1.)
gen.add("ParticleStartingPos", str_t, 0, "ParticleStartingPos",  "0.0, 0.0, 0.0")
gen.add("ParticleStartingVar", str_t, 0, "ParticleStartingVar",  "0.0, 0.0, 0.0")
gen.add("ParticleSetStart",   bool_t,   0, "ParticleSetStart",  False)
gen.add("ParticleReset",   bool_t,   0, "ParticleReset",  False)


# Tracking Mode
tracking_modes = gen.enum([ 
    gen.const("CalibrationMode", int_t, 0, "CalibrationMode"),
    gen.const("MapMode", int_t, 1, "MapMode"),
    gen.const("ParticleMode", int_t, 2, "ParticleMode"),
],"Tracking modes")
gen.add("TrackingMode", int_t, 0, "TrackingMode", 1, 0, 3, edit_method=tracking_modes)

exit(gen.generate("sonar", "Pipeline", "Pipeline"))
